version: '3.8'

x-build-args: &common-build-args
  IMAGE_NAME: "korrektly:latest"

x-env-variables: &common-env
  APP_NAME: "Korrektly"
  APP_ENV: "${APP_ENV:-production}"
  APP_KEY: "${APP_KEY}"
  APP_DEBUG: "${APP_DEBUG:-false}"
  APP_URL: "${APP_URL}"
  APP_LOCALE: "${APP_LOCALE}"
  APP_FALLBACK_LOCALE: "${APP_FALLBACK_LOCALE}"
  APP_FAKER_LOCALE: "${APP_FAKER_LOCALE}"
  APP_MAINTENANCE_DRIVER: "${APP_MAINTENANCE_DRIVER}"
  PHP_CLI_SERVER_WORKERS: "${PHP_CLI_SERVER_WORKERS}"
  BCRYPT_ROUNDS: "${BCRYPT_ROUNDS}"
  LOG_CHANNEL: "${LOG_CHANNEL}"
  LOG_STACK: "${LOG_STACK}"
  LOG_DEPRECATIONS_CHANNEL: "${LOG_DEPRECATIONS_CHANNEL}"
  LOG_LEVEL: "${LOG_LEVEL}"
  DB_CONNECTION: "pgsql"
  DB_HOST: "${DB_HOST}"
  DB_PORT: "${DB_PORT:-5432}"
  DB_DATABASE: "${DB_DATABASE:-postgres}"
  DB_USERNAME: "${DB_USERNAME:-postgres}"
  DB_PASSWORD: "${DB_PASSWORD}"
  SESSION_DRIVER: "${SESSION_DRIVER}"
  SESSION_LIFETIME: "${SESSION_LIFETIME}"
  SESSION_ENCRYPT: "${SESSION_ENCRYPT}"
  SESSION_PATH: "${SESSION_PATH}"
  SESSION_DOMAIN: "${SESSION_DOMAIN}"
  BROADCAST_CONNECTION: "${BROADCAST_CONNECTION}"
  FILESYSTEM_DISK: "${FILESYSTEM_DISK}"
  QUEUE_CONNECTION: "${QUEUE_CONNECTION}"
  CACHE_STORE: "${CACHE_STORE}"
  MEMCACHED_HOST: "${MEMCACHED_HOST}"
  REDIS_CLIENT: "${REDIS_CLIENT}"
  REDIS_HOST: "${REDIS_HOST}"
  REDIS_PASSWORD: "${REDIS_PASSWORD}"
  REDIS_PORT: "${REDIS_PORT}"
  MAIL_MAILER: "${MAIL_MAILER}"
  MAIL_SCHEME: "${MAIL_SCHEME}"
  MAIL_HOST: "${MAIL_HOST}"
  MAIL_PORT: "${MAIL_PORT}"
  MAIL_USERNAME: "${MAIL_USERNAME}"
  MAIL_PASSWORD: "${MAIL_PASSWORD}"
  MAIL_FROM_ADDRESS: "${MAIL_FROM_ADDRESS}"
  MAIL_FROM_NAME: "${MAIL_FROM_NAME}"
  VITE_APP_NAME: "${VITE_APP_NAME}"

services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        <<: *common-build-args
    restart: unless-stopped
    ports:
      - '1969:8080'
    environment:
      <<: *common-env
    volumes:
      - storage:/var/www/html/storage
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://127.0.0.1:8080/healthcheck']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        <<: *common-build-args
    image: "korrektly:latest"
    restart: unless-stopped
    depends_on:
      - app
    environment:
      <<: *common-env
    volumes:
      - storage:/var/www/html/storage
    command: ["php", "/var/www/html/artisan", "queue:work", "--tries=2"]
    healthcheck:
      test: ["CMD", "healthcheck-queue"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  storage: